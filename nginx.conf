# 从 JWT 令牌中提取用户标识，用于会话一致性
map $http_authorization $auth_user_id {
    default "";
    "~*Bearer .*\.(.*)\..*" $1; # 从 JWT 提取用户标识部分
}

# 创建路由键：有 token 时用用户 ID，无 token 时用随机值
map $auth_user_id $routing_key {
    ""      "$remote_addr$request_id"; # 无 token 时，使用 IP + 请求 ID 随机路由
    default $auth_user_id;             # 有 token 时，确保用户会话一致性
}

# 基于混合策略的上游配置
upstream nest-servers {
    hash $routing_key consistent;
    server nest-app-1:3000;
    server nest-app-2:3000;
    server nest-app-3:3000;
    server nest-app-4:3000;
}

# 默认服务器块，处理所有 IP 直接访问
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    listen 443 ssl default_server;
    listen [::]:443 ssl default_server;
    
    ssl_certificate /etc/letsencrypt/live/www.myanki.cc/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.myanki.cc/privkey.pem;
    
    server_name _;
    
    # 拒绝所有请求
    return 444;
}

# HTTP 重定向到 HTTPS
server {
    listen 80;
    server_name www.myanki.cc myanki.cc ws.myanki.cc api.myanki.cc;
    return 301 https://$server_name$request_uri;
}

# API 专用服务器 - 直连，绕过 CDN
server {
    listen 443 ssl;
    server_name api.myanki.cc;
    client_max_body_size 100M;

    ssl_certificate /etc/letsencrypt/live/www.myanki.cc/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.myanki.cc/privkey.pem;
    
    # SSL配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # 安全头部
    add_header Strict-Transport-Security "max-age=63072000" always;
    
    # CORS 头部
    add_header 'Access-Control-Allow-Origin' 'https://www.myanki.cc' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
    
    # 添加请求 ID 到响应头，便于调试和跟踪
    add_header X-Request-ID $request_id always;
    
    # 处理 OPTIONS 预检请求
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' 'https://www.myanki.cc' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
    }
    
    # API 路由处理
    location / {
        proxy_pass http://nest-servers;
        
        # 传递原始 Authorization 头和请求 ID
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Request-ID $request_id;
        
        # 传递其他重要头部
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API 超时配置
        proxy_connect_timeout 300s;
        proxy_send_timeout    300s;
        proxy_read_timeout    300s;
        
        # API 响应启用动态压缩
        gzip on;
        gzip_min_length 1k;
        gzip_types application/json text/plain;
        
        # SSE 请求特殊处理
        if ($http_accept = "text/event-stream") {
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 600s;
            proxy_set_header Connection "";
            add_header X-Accel-Buffering no;
            add_header Cache-Control no-cache;
        }
    }
}

# WebSocket 专用服务器 - 直连，绕过 CDN
server {
    listen 443 ssl;
    server_name ws.myanki.cc;
    client_max_body_size 100M;

    ssl_certificate /etc/letsencrypt/live/www.myanki.cc/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.myanki.cc/privkey.pem;
    
    # SSL配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # 安全头部
    add_header Strict-Transport-Security "max-age=63072000" always;
    
    # CORS 头部
    add_header 'Access-Control-Allow-Origin' 'https://www.myanki.cc' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
    
    # WebSocket 专用配置
    location /socket.io/ {
        proxy_pass http://nest-servers;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        
        # 传递 Authorization 头部，确保用户会话一致性
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Request-ID $request_id;
        
        # WebSocket 特定超时设置
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
        
        # 处理 OPTIONS 预检请求
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'https://www.myanki.cc' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
    
    # 其他路径重定向回主域名
    location / {
        return 301 https://www.myanki.cc$request_uri;
    }
}

# 主服务器配置，处理主域名访问
server {
    listen 443 ssl;
    server_name www.myanki.cc myanki.cc;
    client_max_body_size 100M;

    ssl_certificate /etc/letsencrypt/live/www.myanki.cc/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.myanki.cc/privkey.pem;
    
    # SSL配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS
    add_header Strict-Transport-Security "max-age=63072000" always;
    add_header Content-Security-Policy "default-src https: 'unsafe-inline' 'unsafe-eval' blob:; script-src https: 'unsafe-inline' 'unsafe-eval' blob:; img-src https: data:; font-src https: data:; media-src https: http: data:; connect-src https: wss: ws: 'self';" always;
  
    # 主域名上保留 WebSocket 路径，但添加通知信息
    location /socket.io/ {
        # 添加头部指示客户端应该使用 ws 子域名
        add_header X-WebSocket-Info "For stable connections, use wss://ws.myanki.cc/socket.io/" always;
        
        # 仍然代理到后端，以保持兼容性
        proxy_pass http://nest-servers;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Request-ID $request_id;
        
        # WebSocket 特定超时设置
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;
    }

    # API接口代理 - 现在提示使用专用子域名
    location ^~ /api {
        # 添加头部指示客户端应该使用 api 子域名
        add_header X-API-Info "For direct API access, use https://api.myanki.cc/" always;
        
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://nest-servers;
        
        # 传递 Authorization 头部和请求 ID
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Request-ID $request_id;
        
        # 传递其他重要头部
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 超时配置
        proxy_connect_timeout 300s;
        proxy_send_timeout    300s;
        proxy_read_timeout    300s;
        
        # API响应启用动态压缩
        gzip on;
        gzip_min_length 1k;
        gzip_types application/json text/plain;
    }

    location /chat {
        proxy_pass http://host.docker.internal:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Request-ID $request_id;
        proxy_cache_bypass $http_upgrade;
        
        # SSE 支持
        proxy_buffering off;
        proxy_cache off;
        proxy_read_timeout 300s;
        proxy_set_header Connection '';
        proxy_set_header X-Accel-Buffering no;
        proxy_set_header Cache-Control no-cache;
    }

    # 静态资源
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html;
        
        # 使用预压缩文件
        gzip_static on;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}